#include <windows.h>
#include "services/services.hpp"
#include "ui/menu.hpp"

#include "data/loaders/link-loader.hpp"
#include "data/loaders/entity-loader.hpp"
#include "common/utils/generate-id.hpp"

int main()
{
    SetConsoleOutputCP(CP_UTF8);

    auto department1 = std::make_shared<Department>(generateId(), "Department A");
    auto department2 = std::make_shared<Department>(generateId(), "Department B");

    auto head1 = std::make_shared<HeadDepartment>(generateId(), "Anna", SEX(SEX::FEMALE), Date(1974, 12, 15), Date(2010, 1, 5), 1, 35000);
    auto head2 = std::make_shared<HeadDepartment>(generateId(), "Maksym", SEX(SEX::MALE), Date(1980, 2, 5), Date(2015, 6, 2), 1, 32000);

    auto dispatcher1 = std::make_shared<Dispatcher>(generateId(), "Inna", SEX(SEX::FEMALE), Date(1960, 6, 8), Date(1980, 1, 5), 1, 25500);
    auto dispatcher2 = std::make_shared<Dispatcher>(generateId(), "Veronika", SEX(SEX::FEMALE), Date(1990, 12, 15), Date(2010, 6, 5), 1, 25000);
    auto dispatcher3 = std::make_shared<Dispatcher>(generateId(), "Inna", SEX(SEX::FEMALE), Date(1978, 6, 1), Date(2001, 1, 9), 1, 25500);

    auto cashier1 = std::make_shared<Cashier>(generateId(), "Volodymyr", SEX(SEX::MALE), Date(1999, 5, 7), Date(2018, 11, 4), 1, 20000);
    auto cashier2 = std::make_shared<Cashier>(generateId(), "Maria", SEX(SEX::FEMALE), Date(1983, 12, 15), Date(2001, 4, 8), 1, 22000);
    auto cashier3 = std::make_shared<Cashier>(generateId(), "Maria", SEX(SEX::FEMALE), Date(1980, 6, 7), Date(2003, 5, 7), 1, 22000);
    auto cashier4 = std::make_shared<Cashier>(generateId(), "Anton", SEX(SEX::MALE), Date(1983, 2, 27), Date(2002, 6, 7), 1, 22000);
    auto cashier5 = std::make_shared<Cashier>(generateId(), "Maria", SEX(SEX::FEMALE), Date(1980, 6, 22), Date(2005, 8, 2), 1, 25000);

    auto driver1 = std::make_shared<Driver>(generateId(), "Taras", SEX(SEX::MALE), Date(1982, 5, 12), Date(2008, 9, 10), 3, 24800, std::vector<Date>{Date(2023, 6, 3, 7, 15), Date(2024, 6, 3, 7, 15)});
    auto driver2 = std::make_shared<Driver>(generateId(), "Vasyl", SEX(SEX::MALE), Date(1987, 11, 23), Date(2011, 12, 2), 2, 26500, std::vector<Date>{Date(2023, 8, 12, 6, 45), Date(2024, 8, 12, 6, 45)});
    auto driver3 = std::make_shared<Driver>(generateId(), "Yurii", SEX(SEX::MALE), Date(1991, 3, 17), Date(2016, 2, 28), 5, 25900, std::vector<Date>{Date(2022, 9, 14, 5, 30), Date(2023, 9, 14, 5, 30)});
    auto driver4 = std::make_shared<Driver>(generateId(), "Vlada", SEX(SEX::FEMALE), Date(1994, 9, 25), Date(2020, 7, 1), 0, 25400, std::vector<Date>{Date(2024, 4, 8, 10, 10), Date(2025, 4, 8, 10, 10)});
    auto driver5 = std::make_shared<Driver>(generateId(), "Ihor", SEX(SEX::MALE), Date(1980, 2, 10), Date(2006, 3, 15), 2, 27000, std::vector<Date>{Date(2023, 12, 1, 8, 00), Date(2024, 12, 1, 8, 00)});
    auto driver6 = std::make_shared<Driver>(generateId(), "Mykola", SEX(SEX::MALE), Date(1985, 6, 20), Date(2010, 5, 9), 0, 26200, std::vector<Date>{Date(2024, 1, 18, 6, 40), Date(2025, 1, 18, 6, 40)});
    auto driver7 = std::make_shared<Driver>(generateId(), "Petro", SEX(SEX::MALE), Date(1990, 1, 5), Date(2015, 6, 6), 2, 25000, std::vector<Date>{Date(2023, 10, 22, 9, 30), Date(2024, 10, 22, 9, 30)});
    auto driver8 = std::make_shared<Driver>(generateId(), "Karina", SEX(SEX::FEMALE), Date(1989, 4, 14), Date(2013, 11, 25), 1, 25500, std::vector<Date>{Date(2024, 3, 11, 7, 50), Date(2025, 3, 11, 7, 50)});
    auto driver9 = std::make_shared<Driver>(generateId(), "Andriy", SEX(SEX::MALE), Date(1985, 6, 22), Date(2010, 9, 15), 2, 26000, std::vector<Date>{Date(2024, 4, 1, 8, 0), Date(2025, 4, 1, 8, 0)});
    auto driver10 = std::make_shared<Driver>(generateId(), "Olena", SEX(SEX::FEMALE), Date(1990, 12, 10), Date(2015, 5, 30), 1, 25000, std::vector<Date>{Date(2024, 5, 20, 9, 0), Date(2025, 5, 20, 9, 0)});
    auto driver11 = std::make_shared<Driver>(generateId(), "Mykola", SEX(SEX::MALE), Date(1983, 3, 3), Date(2008, 2, 18), 3, 27000, std::vector<Date>{Date(2024, 6, 15, 7, 30), Date(2025, 6, 15, 7, 30)});
    auto driver12 = std::make_shared<Driver>(generateId(), "Kateryna", SEX(SEX::FEMALE), Date(1988, 9, 9), Date(2012, 7, 12), 2, 25500, std::vector<Date>{Date(2024, 7, 5, 8, 15), Date(2025, 7, 5, 8, 15)});
    auto driver13 = std::make_shared<Driver>(generateId(), "Dmytro", SEX(SEX::MALE), Date(1986, 11, 18), Date(2011, 3, 3), 1, 26500, std::vector<Date>{Date(2024, 8, 10, 7, 45), Date(2025, 8, 10, 7, 45)});

    auto tech1 = std::make_shared<Technician>(generateId(), "Yulia", SEX(SEX::FEMALE), Date(1980, 1, 11), Date(2007, 3, 3), 1, 28000);
    auto tech2 = std::make_shared<Technician>(generateId(), "Oksana", SEX(SEX::FEMALE), Date(1972, 7, 30), Date(1999, 9, 7), 1, 27000);
    auto tech3 = std::make_shared<Technician>(generateId(), "Ivan", SEX(SEX::MALE), Date(1979, 7, 6), Date(1999, 3, 1), 1, 30000);
    auto tech4 = std::make_shared<Technician>(generateId(), "Denys", SEX(SEX::MALE), Date(1990, 9, 6), Date(2012, 6, 1), 6, 26000);
    auto tech5 = std::make_shared<Technician>(generateId(), "Olena", SEX(SEX::FEMALE), Date(1985, 5, 12), Date(2010, 4, 20), 2, 29000);
    auto tech6 = std::make_shared<Technician>(generateId(), "Mykola", SEX(SEX::MALE), Date(1975, 11, 3), Date(2000, 8, 15), 3, 31000);
    auto tech7 = std::make_shared<Technician>(generateId(), "Svitlana", SEX(SEX::FEMALE), Date(1992, 2, 28), Date(2015, 9, 10), 1, 27000);
    auto tech8 = std::make_shared<Technician>(generateId(), "Andriy", SEX(SEX::MALE), Date(1988, 12, 17), Date(2013, 1, 25), 5, 28000);

    auto staff1 = std::make_shared<Staff>(generateId(), "Roman", SEX(SEX::MALE), Date(1978, 2, 2), Date(2004, 6, 6), 1, 20500);
    auto staff2 = std::make_shared<Staff>(generateId(), "Bohdan", SEX(SEX::MALE), Date(1996, 4, 4), Date(2018, 5, 5), 1, 21200);
    auto staff3 = std::make_shared<Staff>(generateId(), "Karina", SEX(SEX::FEMALE), Date(1985, 3, 15), Date(2010, 7, 12), 2, 19800);
    auto staff4 = std::make_shared<Staff>(generateId(), "Oleksandr", SEX(SEX::MALE), Date(1990, 11, 23), Date(2015, 9, 1), 3, 22500);
    auto staff5 = std::make_shared<Staff>(generateId(), "Natalia", SEX(SEX::FEMALE), Date(1982, 5, 10), Date(2009, 4, 17), 1, 20750);
    auto staff6 = std::make_shared<Staff>(generateId(), "Ihor", SEX(SEX::MALE), Date(1975, 8, 30), Date(2000, 3, 3), 2, 23000);
    auto staff7 = std::make_shared<Staff>(generateId(), "Olha", SEX(SEX::FEMALE), Date(1994, 6, 25), Date(2020, 10, 5), 3, 19000);
    auto staff8 = std::make_shared<Staff>(generateId(), "Dmytro", SEX(SEX::MALE), Date(1988, 12, 1), Date(2013, 1, 20), 2, 21500);
    auto staff9 = std::make_shared<Staff>(generateId(), "Ivan", SEX(SEX::MALE), Date(1989, 12, 3), Date(2013, 1, 20), 4, 21500);
    auto staff10 = std::make_shared<Staff>(generateId(), "Viktor", SEX(SEX::MALE), Date(1988, 4, 12), Date(2011, 2, 20), 4, 21500);
    auto staff11 = std::make_shared<Staff>(generateId(), "Olga", SEX(SEX::FEMALE), Date(1985, 7, 10), Date(2009, 5, 15), 3, 22000);
    auto staff12 = std::make_shared<Staff>(generateId(), "Andriy", SEX(SEX::MALE), Date(1990, 1, 5), Date(2014, 3, 10), 2, 21000);
    auto staff13 = std::make_shared<Staff>(generateId(), "Natalia", SEX(SEX::FEMALE), Date(1979, 11, 23), Date(2000, 9, 25), 6, 23000);
    auto staff14 = std::make_shared<Staff>(generateId(), "Serhiy", SEX(SEX::MALE), Date(1983, 3, 18), Date(2008, 6, 12), 4, 22500);
    auto staff15 = std::make_shared<Staff>(generateId(), "Kateryna", SEX(SEX::FEMALE), Date(1987, 9, 9), Date(2010, 10, 30), 5, 24000);
    auto staff16 = std::make_shared<Staff>(generateId(), "Dmytro", SEX(SEX::MALE), Date(1982, 6, 1), Date(2007, 7, 20), 3, 21500);
    auto staff17 = std::make_shared<Staff>(generateId(), "Olena", SEX(SEX::FEMALE), Date(1985, 3, 15), Date(2010, 5, 10), 2, 22000);
    auto staff18 = std::make_shared<Staff>(generateId(), "Serhiy", SEX(SEX::MALE), Date(1978, 12, 25), Date(2002, 11, 1), 5, 23000);
    auto staff19 = std::make_shared<Staff>(generateId(), "Kateryna", SEX(SEX::FEMALE), Date(1990, 7, 4), Date(2014, 1, 20), 1, 21000);
    auto staff20 = std::make_shared<Staff>(generateId(), "Mykola", SEX(SEX::MALE), Date(1983, 9, 9), Date(2008, 3, 15), 4, 22500);
    auto staff21 = std::make_shared<Staff>(generateId(), "Svitlana", SEX(SEX::FEMALE), Date(1976, 11, 30), Date(1998, 6, 10), 6, 24000);
    auto staff22 = std::make_shared<Staff>(generateId(), "Andriy", SEX(SEX::MALE), Date(1989, 2, 18), Date(2013, 7, 22), 3, 21500);
    auto staff23 = std::make_shared<Staff>(generateId(), "Olha", SEX(SEX::FEMALE), Date(1987, 8, 12), Date(2011, 4, 5), 2, 22000);
    auto staff24 = std::make_shared<Staff>(generateId(), "Volodymyr", SEX(SEX::MALE), Date(1980, 5, 27), Date(2005, 9, 30), 5, 23500);
    auto staff25 = std::make_shared<Staff>(generateId(), "Nadiya", SEX(SEX::FEMALE), Date(1992, 1, 17), Date(2016, 10, 18), 1, 21000);
    auto staff26 = std::make_shared<Staff>(generateId(), "Pavlo", SEX(SEX::MALE), Date(1984, 4, 2), Date(2009, 12, 12), 4, 22000);

    auto tech_brigade1 = std::make_shared<TechnicianBrigade>(generateId(), "Technnician brigade 1");
    auto tech_brigade2 = std::make_shared<TechnicianBrigade>(generateId(), "Technnician brigade 2");

    auto loco_brigade1 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 1");
    auto loco_brigade2 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 2");
    auto loco_brigade3 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 3");
    auto loco_brigade4 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 4");
    auto loco_brigade5 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 5");
    auto loco_brigade6 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 6");
    auto loco_brigade7 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 7");
    auto loco_brigade8 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 8");
    auto loco_brigade9 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 9");
    auto loco_brigade10 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 10");
    auto loco_brigade11 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 11");
    auto loco_brigade12 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 12");
    auto loco_brigade13 = std::make_shared<LocomotiveBrigade>(generateId(), "Locomotive Brigade 13");

    auto loco1 = std::make_shared<Locomotive>(generateId(), Date(2015, 6, 11), std::vector<Date>{Date(2020, 6, 11), Date(2022, 6, 11)}, std::vector<Date>{Date(2021, 6, 11)}, 1000, 500);
    auto loco2 = std::make_shared<Locomotive>(generateId(), Date(2001, 1, 1), std::vector<Date>{Date(2006, 1, 1), Date(2008, 1, 1), Date(2010, 1, 1)}, std::vector<Date>{Date(2009, 1, 1), Date(2025, 1, 1)}, 2000, 30);
    auto loco3 = std::make_shared<Locomotive>(generateId(), Date(2004, 3, 15), std::vector<Date>{Date(2007, 3, 15), Date(2009, 3, 15), Date(2011, 3, 15)}, std::vector<Date>{}, 1800, 1800);
    auto loco4 = std::make_shared<Locomotive>(generateId(), Date(2003, 7, 3), std::vector<Date>{Date(2008, 7, 3), Date(2013, 7, 3)}, std::vector<Date>{Date(2010, 7, 3), Date(2012, 7, 3)}, 940, 100);
    auto loco5 = std::make_shared<Locomotive>(generateId(), Date(2005, 7, 22), std::vector<Date>{Date(2010, 8, 1), Date(2015, 8, 1)}, std::vector<Date>{Date(2022, 10, 12)}, 910, 200);
    auto loco6 = std::make_shared<Locomotive>(generateId(), Date(2010, 4, 18), std::vector<Date>{Date(2015, 4, 18), Date(2020, 4, 18)}, std::vector<Date>{Date(2018, 4, 18)}, 1500, 600);
    auto loco7 = std::make_shared<Locomotive>(generateId(), Date(1998, 11, 5), std::vector<Date>{Date(2003, 11, 5), Date(2009, 11, 5), Date(2014, 11, 5)}, std::vector<Date>{Date(2012, 11, 5), Date(2019, 11, 5)}, 2200, 3000);
    auto loco8 = std::make_shared<Locomotive>(generateId(), Date(2018, 9, 30), std::vector<Date>{Date(2023, 9, 30)}, std::vector<Date>{}, 1300, 1300);
    auto loco9 = std::make_shared<Locomotive>(generateId(), Date(2007, 4, 20), std::vector<Date>{Date(2012, 4, 20), Date(2017, 4, 20)}, std::vector<Date>{Date(2015, 4, 20)}, 1500, 120);
    auto loco10 = std::make_shared<Locomotive>(generateId(), Date(2010, 11, 15), std::vector<Date>{Date(2015, 11, 15), Date(2020, 11, 15)}, std::vector<Date>{}, 1800, 250);
    auto loco11 = std::make_shared<Locomotive>(generateId(), Date(2003, 9, 10), std::vector<Date>{Date(2008, 9, 10), Date(2013, 9, 10)}, std::vector<Date>{Date(2011, 9, 10)}, 1700, 90);
    auto loco12 = std::make_shared<Locomotive>(generateId(), Date(2012, 5, 30), std::vector<Date>{Date(2017, 5, 30)}, std::vector<Date>{Date(2019, 5, 30)}, 1600, 80);
    auto loco13 = std::make_shared<Locomotive>(generateId(), Date(2000, 2, 2), std::vector<Date>{Date(2005, 2, 2), Date(2010, 2, 2), Date(2015, 2, 2)}, std::vector<Date>{Date(2012, 2, 2)}, 1900, 150);

    auto warsaw = std::make_shared<Station>(generateId(), "Варшава", Position(-401, 194));
    auto krakow = std::make_shared<Station>(generateId(), "Краків", Position(-541, -112));
    auto lviv = std::make_shared<Station>(generateId(), "Львів", Position(-180, -67));
    auto ivano_frankivsk = std::make_shared<Station>(generateId(), "Івано-Франківськ", Position(-122, -168));
    auto ternopil = std::make_shared<Station>(generateId(), "Тернопіль", Position(-65, -100));
    auto khmelnytskyi = std::make_shared<Station>(generateId(), "Хмельницький", Position(-55, -37));
    auto zhytomyr = std::make_shared<Station>(generateId(), "Житомир", Position(-156, -21));
    auto kyiv = std::make_shared<Station>(generateId(), "Київ", Position(0, 0));
    auto bila_tserkva = std::make_shared<Station>(generateId(), "Біла Церква", Position(59, -73));
    auto uman = std::make_shared<Station>(generateId(), "Умань", Position(78, -195));
    auto poltava = std::make_shared<Station>(generateId(), "Полтава", Position(250, -19));
    auto odesa = std::make_shared<Station>(generateId(), "Полтава", Position(128, -451));
    auto kharkiv = std::make_shared<Station>(generateId(), "Харків", Position(324, -5));

    auto route_if_kharkiv = std::make_shared<Route>(generateId(), "Івано-Франківська -> Харків", TypeRoute(TypeRoute::Domestic));
    auto trip_if_kharkiv_m = std::make_shared<Trip>(generateId(), "Івано-Франківська -> Харків ранковий", Date(2025, 6, 7, 8, 00));
    auto trip_if_kharkiv_e = std::make_shared<Trip>(generateId(), "Івано-Франківська -> Харків вечірній", Date(2025, 6, 7, 18, 00));

    auto route_if_krakow = std::make_shared<Route>(generateId(), "Івано-Франківська -> Краків", TypeRoute(TypeRoute::International));
    auto trip_if_krakow_m = std::make_shared<Trip>(generateId(), "Івано-Франківська -> Краків ранковий", Date(2025, 6, 8, 7, 00));
    auto trip_if_krakow_e = std::make_shared<Trip>(generateId(), "Івано-Франківська -> Краків вечірній", Date(2025, 6, 8, 17, 00), Date(0, 15), TripStatus(Status::Delayed, "poor-preparation", Date(1, 30)));

    auto route_kyiv_warsaw = std::make_shared<Route>(generateId(), "Київ -> Варшава", TypeRoute(TypeRoute::International));
    auto trip_kyiv_warsaw_m = std::make_shared<Trip>(generateId(), "Київ -> Варшава ранковий", Date(2025, 6, 8, 6, 00));
    auto trip_kyiv_warsaw_e = std::make_shared<Trip>(generateId(), "Київ -> Варшава вечірній", Date(2025, 6, 8, 20, 00), Date(0, 15), TripStatus(Status::Canceled, "engine-failure"));

    auto route_kharkiv_ternopil = std::make_shared<Route>(generateId(), "Харків -> Тернопіль", TypeRoute(TypeRoute::Domestic));
    auto trip_kharkiv_ternopil_m = std::make_shared<Trip>(generateId(), "Харків -> Тернопіль ранковий", Date(2025, 6, 18, 7, 00));
    auto trip_kharkiv_ternopil_e = std::make_shared<Trip>(generateId(), "Харків -> Тернопіль вечірній", Date(2025, 6, 18, 19, 00));

    auto route_odesa_bila = std::make_shared<Route>(generateId(), "Одеса -> Біла Церква", TypeRoute(TypeRoute::Domestic));
    auto trip_odesa_bila_m = std::make_shared<Trip>(generateId(), "Одеса -> Біла Церква ранковий", Date(2025, 6, 19, 6, 45));
    auto trip_odesa_bila_e = std::make_shared<Trip>(generateId(), "Одеса -> Біла Церква вечірній", Date(2025, 6, 19, 18, 30));

    auto route_uman_lviv = std::make_shared<Route>(generateId(), "Умань -> Львів", TypeRoute(TypeRoute::Domestic));
    auto trip_uman_lviv_m = std::make_shared<Trip>(generateId(), "Умань -> Львів ранковий", Date(2025, 6, 21, 9, 00));
    auto trip_uman_lviv_e = std::make_shared<Trip>(generateId(), "Умань -> Львів вечірній", Date(2025, 6, 21, 21, 00));

    auto route_krakow_if = std::make_shared<Route>(generateId(), "Краків -> Івано-Франківськ", TypeRoute(TypeRoute::International));
    auto trip_krakow_if_m = std::make_shared<Trip>(generateId(), "Краків -> Івано-Франківськ ранковий", Date(2025, 6, 22, 7, 30));
    auto trip_krakow_if_e = std::make_shared<Trip>(generateId(), "Краків -> Івано-Франківськ вечірній", Date(2025, 6, 22, 17, 45));

    auto route_odesa_zhyt = std::make_shared<Route>(generateId(), "Одеса -> Житомир", TypeRoute(TypeRoute::Domestic));
    auto trip_odesa_zhyt_m = std::make_shared<Trip>(generateId(), "Одеса -> Житомир ранковий", Date(2025, 6, 11, 8, 00));
    auto trip_odesa_zhyt_e = std::make_shared<Trip>(generateId(), "Одеса -> Житомир вечірній", Date(2025, 6, 11, 17, 00), Date(0, 20), TripStatus(Status::Delayed, "rail-traffic", Date(0, 25)));

    auto train1 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train2 = std::make_shared<Train>(generateId(), TrainType(TrainType::FAST));
    auto train3 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train4 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train5 = std::make_shared<Train>(generateId(), TrainType(TrainType::FAST));
    auto train6 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train7 = std::make_shared<Train>(generateId(), TrainType(TrainType::FAST));
    auto train8 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train9 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train10 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train11 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train12 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));
    auto train13 = std::make_shared<Train>(generateId(), TrainType(TrainType::PASSANGERS));

    auto passenger1 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(1988, 10, 20));
    auto passenger2 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2001, 12, 1));
    auto passenger3 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(2006, 10, 30));
    auto passenger4 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2007, 7, 27));
    auto passenger5 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(1999, 11, 22));
    auto passenger6 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2002, 1, 1));
    auto passenger7 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(1965, 5, 18));
    auto passenger8 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2003, 6, 22));
    auto passenger9 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2003, 6, 22));
    auto passenger10 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2003, 6, 22));
    auto passenger11 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::FEMALE), Date(2004, 9, 22));
    auto passenger12 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2001, 12, 21));
    auto passenger13 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(1995, 3, 15));
    auto passenger14 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(1980, 8, 5));
    auto passenger15 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(2010, 2, 12));
    auto passenger16 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(1993, 11, 30));
    auto passenger17 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(1972, 4, 9));
    auto passenger18 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2005, 7, 17));
    auto passenger19 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::MALE), Date(1990, 1, 10));
    auto passenger20 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::FEMALE), Date(1998, 12, 25));
    auto passenger21 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(2000, 4, 4));
    auto passenger22 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(1985, 9, 14));
    auto passenger23 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(2015, 6, 1));
    auto passenger24 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(1970, 2, 17));
    auto passenger25 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::FEMALE), Date(1996, 3, 8));
    auto passenger26 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::MALE), Date(2008, 10, 5));
    auto passenger27 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::FEMALE), Date(2009, 7, 19));
    auto passenger28 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::MALE), Date(2002, 5, 23));
    auto passenger29 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::FEMALE), Date(1991, 11, 30));
    auto passenger30 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::MALE), Date(2006, 6, 6));
    auto passenger31 = std::make_shared<Passenger>(generateId(), true, SEX(SEX::FEMALE), Date(1983, 1, 27));
    auto passenger32 = std::make_shared<Passenger>(generateId(), false, SEX(SEX::MALE), Date(1997, 8, 13));

    auto ticket_if_kharkiv_m1 = std::make_shared<Ticket>(generateId(), 500, Date(2025, 6, 6, 10, 00));
    auto ticket_if_kharkiv_m2 = std::make_shared<Ticket>(generateId(), 500);
    auto ticket_if_kharkiv_e1 = std::make_shared<Ticket>(generateId(), 500, Date(2025, 6, 7, 12, 00));
    auto ticket_if_kharkiv_e2 = std::make_shared<Ticket>(generateId(), 500);

    auto ticket_if_krakow_m1 = std::make_shared<Ticket>(generateId(), 700, Date(2025, 6, 7, 10, 00));
    auto ticket_if_krakow_m2 = std::make_shared<Ticket>(generateId(), 700);
    auto ticket_if_krakow_e1 = std::make_shared<Ticket>(generateId(), 700, Date(2025, 6, 8, 12, 00), TicketStatus(true, Date(2025, 6, 8, 16, 30)));
    auto ticket_if_krakow_e2 = std::make_shared<Ticket>(generateId(), 700, Date(2025, 6, 8, 9, 00));

    auto ticket_kyiv_warsaw_m1 = std::make_shared<Ticket>(generateId(), 850, Date(2025, 6, 7, 14, 00));
    auto ticket_kyiv_warsaw_m2 = std::make_shared<Ticket>(generateId(), 850);
    auto ticket_kyiv_warsaw_e1 = std::make_shared<Ticket>(generateId(), 850);
    auto ticket_kyiv_warsaw_e2 = std::make_shared<Ticket>(generateId(), 850, Date(2025, 6, 8, 18, 00));

    auto ticket_kharkiv_ternopil_m1 = std::make_shared<Ticket>(generateId(), 430, Date(2025, 6, 17, 10, 00));
    auto ticket_kharkiv_ternopil_m2 = std::make_shared<Ticket>(generateId(), 430);
    auto ticket_kharkiv_ternopil_e1 = std::make_shared<Ticket>(generateId(), 430, Date(2025, 6, 18, 15, 00));
    auto ticket_kharkiv_ternopil_e2 = std::make_shared<Ticket>(generateId(), 430);

    auto ticket_odesa_bila_m1 = std::make_shared<Ticket>(generateId(), 360, Date(2025, 6, 18, 11, 00));
    auto ticket_odesa_bila_m2 = std::make_shared<Ticket>(generateId(), 360);
    auto ticket_odesa_bila_e1 = std::make_shared<Ticket>(generateId(), 360, Date(2025, 6, 19, 17, 00));
    auto ticket_odesa_bila_e2 = std::make_shared<Ticket>(generateId(), 360, Date(2025, 6, 19, 12, 30));

    auto ticket_uman_lviv_m1 = std::make_shared<Ticket>(generateId(), 470, Date(2025, 6, 20, 10, 00));
    auto ticket_uman_lviv_m2 = std::make_shared<Ticket>(generateId(), 470);
    auto ticket_uman_lviv_e1 = std::make_shared<Ticket>(generateId(), 470, Date(2025, 6, 21, 19, 00));
    auto ticket_uman_lviv_e2 = std::make_shared<Ticket>(generateId(), 470);

    auto ticket_krakow_if_m1 = std::make_shared<Ticket>(generateId(), 750, Date(2025, 6, 21, 10, 00));
    auto ticket_krakow_if_m2 = std::make_shared<Ticket>(generateId(), 750);
    auto ticket_krakow_if_e1 = std::make_shared<Ticket>(generateId(), 750, Date(2025, 6, 22, 16, 00));
    auto ticket_krakow_if_e2 = std::make_shared<Ticket>(generateId(), 750, Date(2025, 6, 22, 13, 00), TicketStatus(true, Date(2025, 6, 22, 15, 30)));

    auto ticket_odesa_zhy_m1 = std::make_shared<Ticket>(generateId(), 410, Date(2025, 6, 10, 10, 00));
    auto ticket_odesa_zhy_m2 = std::make_shared<Ticket>(generateId(), 410);
    auto ticket_odesa_zhy_e1 = std::make_shared<Ticket>(generateId(), 410, Date(2025, 6, 11, 14, 00));
    auto ticket_odesa_zhy_e2 = std::make_shared<Ticket>(generateId(), 410, Date(2025, 6, 11, 15, 30), TicketStatus(true, Date(2025, 6, 11, 16, 30)));

    OneToOne<Department, HeadDepartment> department_to_head_department;
    department_to_head_department.link(department1, head1);
    department_to_head_department.link(department2, head2);

    OneToMany<Department, Employee> department_to_employee;
    department_to_employee.link(department1, head1);
    department_to_employee.link(department1, cashier1);
    department_to_employee.link(department1, cashier2);
    department_to_employee.link(department1, cashier3);
    department_to_employee.link(department1, dispatcher1);
    department_to_employee.link(department1, dispatcher2);
    department_to_employee.link(department1, driver1);
    department_to_employee.link(department1, driver2);
    department_to_employee.link(department1, driver3);
    department_to_employee.link(department1, driver4);
    department_to_employee.link(department1, driver5);
    department_to_employee.link(department1, driver6);
    department_to_employee.link(department1, driver7);
    department_to_employee.link(department1, driver8);
    department_to_employee.link(department1, driver9);
    department_to_employee.link(department1, driver10);
    department_to_employee.link(department1, driver11);
    department_to_employee.link(department1, driver12);
    department_to_employee.link(department1, driver13);
    department_to_employee.link(department1, tech1);
    department_to_employee.link(department1, tech2);
    department_to_employee.link(department1, tech3);
    department_to_employee.link(department1, tech4);
    department_to_employee.link(department1, tech5);
    department_to_employee.link(department1, tech6);
    department_to_employee.link(department1, tech7);
    department_to_employee.link(department1, tech8);
    department_to_employee.link(department1, staff1);
    department_to_employee.link(department1, staff2);
    department_to_employee.link(department1, staff3);
    department_to_employee.link(department1, staff4);
    department_to_employee.link(department1, staff5);
    department_to_employee.link(department1, staff6);
    department_to_employee.link(department1, staff7);
    department_to_employee.link(department1, staff8);
    department_to_employee.link(department1, staff9);
    department_to_employee.link(department1, staff10);
    department_to_employee.link(department1, staff11);
    department_to_employee.link(department1, staff12);
    department_to_employee.link(department1, staff13);
    department_to_employee.link(department1, staff14);
    department_to_employee.link(department1, staff15);
    department_to_employee.link(department1, staff16);
    department_to_employee.link(department1, staff17);
    department_to_employee.link(department1, staff18);
    department_to_employee.link(department1, staff19);
    department_to_employee.link(department1, staff20);
    department_to_employee.link(department1, staff21);
    department_to_employee.link(department1, staff22);
    department_to_employee.link(department1, staff23);
    department_to_employee.link(department1, staff24);
    department_to_employee.link(department1, staff25);
    department_to_employee.link(department1, staff26);

    department_to_employee.link(department2, head2);
    department_to_employee.link(department2, cashier4);
    department_to_employee.link(department2, cashier5);
    department_to_employee.link(department2, dispatcher3);

    OneToMany<Station, Locomotive> station_to_locomotives;
    station_to_locomotives.link(warsaw, loco1);
    station_to_locomotives.link(krakow, loco2);
    station_to_locomotives.link(lviv, loco3);
    station_to_locomotives.link(ivano_frankivsk, loco4);
    station_to_locomotives.link(ternopil, loco5);
    station_to_locomotives.link(khmelnytskyi, loco6);
    station_to_locomotives.link(zhytomyr, loco7);
    station_to_locomotives.link(kyiv, loco8);
    station_to_locomotives.link(bila_tserkva, loco9);
    station_to_locomotives.link(uman, loco10);
    station_to_locomotives.link(poltava, loco11);
    station_to_locomotives.link(odesa, loco12);
    station_to_locomotives.link(kharkiv, loco13);

    OneToMany<Locomotive, Driver> locomotive_to_drivers;
    locomotive_to_drivers.link(loco1, driver1);
    locomotive_to_drivers.link(loco2, driver2);
    locomotive_to_drivers.link(loco3, driver3);
    locomotive_to_drivers.link(loco4, driver4);
    locomotive_to_drivers.link(loco5, driver5);
    locomotive_to_drivers.link(loco6, driver6);
    locomotive_to_drivers.link(loco7, driver7);
    locomotive_to_drivers.link(loco8, driver8);
    locomotive_to_drivers.link(loco9, driver9);
    locomotive_to_drivers.link(loco10, driver10);
    locomotive_to_drivers.link(loco11, driver11);
    locomotive_to_drivers.link(loco12, driver12);
    locomotive_to_drivers.link(loco13, driver13);

    OneToMany<TechnicianBrigade, Locomotive> tech_brigade_to_locomotives;
    tech_brigade_to_locomotives.link(tech_brigade1, loco1);
    tech_brigade_to_locomotives.link(tech_brigade1, loco2);
    tech_brigade_to_locomotives.link(tech_brigade1, loco3);
    tech_brigade_to_locomotives.link(tech_brigade1, loco4);
    tech_brigade_to_locomotives.link(tech_brigade1, loco5);
    tech_brigade_to_locomotives.link(tech_brigade1, loco6);
    tech_brigade_to_locomotives.link(tech_brigade2, loco7);
    tech_brigade_to_locomotives.link(tech_brigade2, loco8);
    tech_brigade_to_locomotives.link(tech_brigade2, loco9);
    tech_brigade_to_locomotives.link(tech_brigade2, loco10);
    tech_brigade_to_locomotives.link(tech_brigade2, loco11);
    tech_brigade_to_locomotives.link(tech_brigade2, loco12);
    tech_brigade_to_locomotives.link(tech_brigade2, loco13);

    OneToMany<TechnicianBrigade, Technician> tech_brigade_to_technician;
    tech_brigade_to_technician.link(tech_brigade1, tech1);
    tech_brigade_to_technician.link(tech_brigade1, tech2);
    tech_brigade_to_technician.link(tech_brigade1, tech3);
    tech_brigade_to_technician.link(tech_brigade1, tech4);
    tech_brigade_to_technician.link(tech_brigade2, tech5);
    tech_brigade_to_technician.link(tech_brigade2, tech6);
    tech_brigade_to_technician.link(tech_brigade2, tech7);
    tech_brigade_to_technician.link(tech_brigade2, tech8);

    OneToOne<LocomotiveBrigade, Locomotive> locomotive_brigade_to_locomotive;
    locomotive_brigade_to_locomotive.link(loco_brigade1, loco1);
    locomotive_brigade_to_locomotive.link(loco_brigade2, loco2);
    locomotive_brigade_to_locomotive.link(loco_brigade3, loco3);
    locomotive_brigade_to_locomotive.link(loco_brigade4, loco4);
    locomotive_brigade_to_locomotive.link(loco_brigade5, loco5);
    locomotive_brigade_to_locomotive.link(loco_brigade6, loco6);
    locomotive_brigade_to_locomotive.link(loco_brigade7, loco7);
    locomotive_brigade_to_locomotive.link(loco_brigade8, loco8);
    locomotive_brigade_to_locomotive.link(loco_brigade9, loco9);
    locomotive_brigade_to_locomotive.link(loco_brigade10, loco10);
    locomotive_brigade_to_locomotive.link(loco_brigade11, loco11);
    locomotive_brigade_to_locomotive.link(loco_brigade12, loco12);
    locomotive_brigade_to_locomotive.link(loco_brigade13, loco13);

    OneToMany<LocomotiveBrigade, Staff> locomotive_brigade_to_staffs;
    locomotive_brigade_to_staffs.link(loco_brigade1, staff1);
    locomotive_brigade_to_staffs.link(loco_brigade1, staff2);
    locomotive_brigade_to_staffs.link(loco_brigade2, staff3);
    locomotive_brigade_to_staffs.link(loco_brigade2, staff4);
    locomotive_brigade_to_staffs.link(loco_brigade3, staff5);
    locomotive_brigade_to_staffs.link(loco_brigade3, staff6);
    locomotive_brigade_to_staffs.link(loco_brigade4, staff7);
    locomotive_brigade_to_staffs.link(loco_brigade4, staff8);
    locomotive_brigade_to_staffs.link(loco_brigade5, staff9);
    locomotive_brigade_to_staffs.link(loco_brigade5, staff10);
    locomotive_brigade_to_staffs.link(loco_brigade6, staff11);
    locomotive_brigade_to_staffs.link(loco_brigade6, staff12);
    locomotive_brigade_to_staffs.link(loco_brigade7, staff13);
    locomotive_brigade_to_staffs.link(loco_brigade7, staff14);
    locomotive_brigade_to_staffs.link(loco_brigade8, staff15);
    locomotive_brigade_to_staffs.link(loco_brigade8, staff16);
    locomotive_brigade_to_staffs.link(loco_brigade9, staff17);
    locomotive_brigade_to_staffs.link(loco_brigade9, staff18);
    locomotive_brigade_to_staffs.link(loco_brigade10, staff19);
    locomotive_brigade_to_staffs.link(loco_brigade10, staff20);
    locomotive_brigade_to_staffs.link(loco_brigade11, staff21);
    locomotive_brigade_to_staffs.link(loco_brigade11, staff22);
    locomotive_brigade_to_staffs.link(loco_brigade12, staff23);
    locomotive_brigade_to_staffs.link(loco_brigade12, staff24);
    locomotive_brigade_to_staffs.link(loco_brigade13, staff25);
    locomotive_brigade_to_staffs.link(loco_brigade13, staff26);

    ManyToMany<Route, Station> routes_to_stations;
    routes_to_stations.link(route_if_kharkiv, ivano_frankivsk);
    routes_to_stations.link(route_if_kharkiv, ternopil);
    routes_to_stations.link(route_if_kharkiv, khmelnytskyi);
    routes_to_stations.link(route_if_kharkiv, bila_tserkva);
    routes_to_stations.link(route_if_kharkiv, poltava);
    routes_to_stations.link(route_if_kharkiv, kharkiv);

    routes_to_stations.link(route_if_krakow, ivano_frankivsk);
    routes_to_stations.link(route_if_krakow, lviv);
    routes_to_stations.link(route_if_krakow, krakow);

    routes_to_stations.link(route_kyiv_warsaw, kyiv);
    routes_to_stations.link(route_kyiv_warsaw, bila_tserkva);
    routes_to_stations.link(route_kyiv_warsaw, khmelnytskyi);
    routes_to_stations.link(route_kyiv_warsaw, ternopil);
    routes_to_stations.link(route_kyiv_warsaw, ivano_frankivsk);
    routes_to_stations.link(route_kyiv_warsaw, lviv);
    routes_to_stations.link(route_kyiv_warsaw, krakow);
    routes_to_stations.link(route_kyiv_warsaw, warsaw);

    routes_to_stations.link(route_kharkiv_ternopil, kharkiv);
    routes_to_stations.link(route_kharkiv_ternopil, poltava);
    routes_to_stations.link(route_kharkiv_ternopil, poltava);
    routes_to_stations.link(route_kharkiv_ternopil, bila_tserkva);
    routes_to_stations.link(route_kharkiv_ternopil, khmelnytskyi);
    routes_to_stations.link(route_kharkiv_ternopil, ternopil);

    routes_to_stations.link(route_odesa_bila, odesa);
    routes_to_stations.link(route_odesa_bila, uman);
    routes_to_stations.link(route_odesa_bila, khmelnytskyi);
    routes_to_stations.link(route_odesa_bila, bila_tserkva);

    routes_to_stations.link(route_uman_lviv, uman);
    routes_to_stations.link(route_uman_lviv, khmelnytskyi);
    routes_to_stations.link(route_uman_lviv, ternopil);
    routes_to_stations.link(route_uman_lviv, ivano_frankivsk);
    routes_to_stations.link(route_uman_lviv, lviv);

    routes_to_stations.link(route_krakow_if, krakow);
    routes_to_stations.link(route_krakow_if, lviv);
    routes_to_stations.link(route_krakow_if, ivano_frankivsk);

    routes_to_stations.link(route_odesa_zhyt, odesa);
    routes_to_stations.link(route_odesa_zhyt, uman);
    routes_to_stations.link(route_odesa_zhyt, khmelnytskyi);
    routes_to_stations.link(route_odesa_zhyt, bila_tserkva);
    routes_to_stations.link(route_odesa_zhyt, zhytomyr);

    OneToMany<Route, Trip> route_to_trips;
    route_to_trips.link(route_if_kharkiv, trip_if_kharkiv_m);
    route_to_trips.link(route_if_kharkiv, trip_if_kharkiv_e);
    route_to_trips.link(route_if_krakow, trip_if_krakow_m);
    route_to_trips.link(route_if_krakow, trip_if_krakow_e);
    route_to_trips.link(route_kyiv_warsaw, trip_kyiv_warsaw_m);
    route_to_trips.link(route_kyiv_warsaw, trip_kyiv_warsaw_e);
    route_to_trips.link(route_kharkiv_ternopil, trip_kharkiv_ternopil_m);
    route_to_trips.link(route_kharkiv_ternopil, trip_kharkiv_ternopil_e);
    route_to_trips.link(route_odesa_bila, trip_odesa_bila_m);
    route_to_trips.link(route_odesa_bila, trip_odesa_bila_e);
    route_to_trips.link(route_uman_lviv, trip_uman_lviv_m);
    route_to_trips.link(route_uman_lviv, trip_uman_lviv_e);
    route_to_trips.link(route_krakow_if, trip_krakow_if_m);
    route_to_trips.link(route_krakow_if, trip_krakow_if_e);
    route_to_trips.link(route_odesa_zhyt, trip_odesa_zhyt_m);
    route_to_trips.link(route_odesa_zhyt, trip_odesa_zhyt_e);

    ManyToMany<Locomotive, Trip> locomotives_to_trips;
    locomotives_to_trips.link(loco1, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco1, trip_kyiv_warsaw_e);

    locomotives_to_trips.link(loco2, trip_if_krakow_m);
    locomotives_to_trips.link(loco2, trip_if_krakow_e);
    locomotives_to_trips.link(loco2, trip_krakow_if_m);
    locomotives_to_trips.link(loco2, trip_krakow_if_e);
    locomotives_to_trips.link(loco2, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco2, trip_kyiv_warsaw_e);

    locomotives_to_trips.link(loco3, trip_if_krakow_m);
    locomotives_to_trips.link(loco3, trip_if_krakow_e);
    locomotives_to_trips.link(loco3, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco3, trip_kyiv_warsaw_e);
    locomotives_to_trips.link(loco3, trip_uman_lviv_m);
    locomotives_to_trips.link(loco3, trip_uman_lviv_e);
    locomotives_to_trips.link(loco3, trip_krakow_if_m);
    locomotives_to_trips.link(loco3, trip_krakow_if_e);

    locomotives_to_trips.link(loco4, trip_if_kharkiv_m);
    locomotives_to_trips.link(loco4, trip_if_kharkiv_e);
    locomotives_to_trips.link(loco4, trip_if_krakow_m);
    locomotives_to_trips.link(loco4, trip_if_krakow_e);
    locomotives_to_trips.link(loco4, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco4, trip_kyiv_warsaw_e);
    locomotives_to_trips.link(loco4, trip_uman_lviv_m);
    locomotives_to_trips.link(loco4, trip_uman_lviv_e);
    locomotives_to_trips.link(loco4, trip_krakow_if_m);
    locomotives_to_trips.link(loco4, trip_krakow_if_e);

    locomotives_to_trips.link(loco5, trip_if_kharkiv_m);
    locomotives_to_trips.link(loco5, trip_if_kharkiv_e);
    locomotives_to_trips.link(loco5, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco5, trip_kyiv_warsaw_e);
    locomotives_to_trips.link(loco5, trip_kharkiv_ternopil_m);
    locomotives_to_trips.link(loco5, trip_kharkiv_ternopil_e);
    locomotives_to_trips.link(loco5, trip_uman_lviv_m);
    locomotives_to_trips.link(loco5, trip_uman_lviv_e);

    locomotives_to_trips.link(loco6, trip_if_kharkiv_m);
    locomotives_to_trips.link(loco6, trip_if_kharkiv_e);
    locomotives_to_trips.link(loco6, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco6, trip_kyiv_warsaw_e);
    locomotives_to_trips.link(loco6, trip_kharkiv_ternopil_m);
    locomotives_to_trips.link(loco6, trip_kharkiv_ternopil_e);
    locomotives_to_trips.link(loco6, trip_odesa_bila_m);
    locomotives_to_trips.link(loco6, trip_odesa_bila_e);
    locomotives_to_trips.link(loco6, trip_uman_lviv_m);
    locomotives_to_trips.link(loco6, trip_uman_lviv_e);
    locomotives_to_trips.link(loco6, trip_odesa_zhyt_m);
    locomotives_to_trips.link(loco6, trip_odesa_zhyt_e);

    locomotives_to_trips.link(loco7, trip_odesa_zhyt_m);
    locomotives_to_trips.link(loco7, trip_odesa_zhyt_e);

    locomotives_to_trips.link(loco8, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco8, trip_kyiv_warsaw_e);

    locomotives_to_trips.link(loco9, trip_if_kharkiv_m);
    locomotives_to_trips.link(loco9, trip_if_kharkiv_e);
    locomotives_to_trips.link(loco9, trip_kyiv_warsaw_m);
    locomotives_to_trips.link(loco9, trip_kyiv_warsaw_e);
    locomotives_to_trips.link(loco9, trip_kharkiv_ternopil_m);
    locomotives_to_trips.link(loco9, trip_kharkiv_ternopil_e);
    locomotives_to_trips.link(loco9, trip_odesa_bila_m);
    locomotives_to_trips.link(loco9, trip_odesa_bila_e);
    locomotives_to_trips.link(loco9, trip_odesa_zhyt_m);
    locomotives_to_trips.link(loco9, trip_odesa_zhyt_e);

    locomotives_to_trips.link(loco10, trip_odesa_bila_m);
    locomotives_to_trips.link(loco10, trip_odesa_bila_e);
    locomotives_to_trips.link(loco10, trip_uman_lviv_m);
    locomotives_to_trips.link(loco10, trip_uman_lviv_e);
    locomotives_to_trips.link(loco10, trip_odesa_zhyt_m);
    locomotives_to_trips.link(loco10, trip_odesa_zhyt_e);

    locomotives_to_trips.link(loco11, trip_if_kharkiv_m);
    locomotives_to_trips.link(loco11, trip_if_kharkiv_e);
    locomotives_to_trips.link(loco11, trip_kharkiv_ternopil_m);
    locomotives_to_trips.link(loco11, trip_kharkiv_ternopil_e);

    locomotives_to_trips.link(loco12, trip_odesa_bila_m);
    locomotives_to_trips.link(loco12, trip_odesa_bila_e);
    locomotives_to_trips.link(loco12, trip_odesa_zhyt_m);
    locomotives_to_trips.link(loco12, trip_odesa_zhyt_e);

    locomotives_to_trips.link(loco13, trip_if_kharkiv_m);
    locomotives_to_trips.link(loco13, trip_if_kharkiv_e);
    locomotives_to_trips.link(loco13, trip_kharkiv_ternopil_m);
    locomotives_to_trips.link(loco13, trip_kharkiv_ternopil_e);

    OneToOne<Train, Locomotive> trains_to_locomotive;
    trains_to_locomotive.link(train1, loco1);
    trains_to_locomotive.link(train2, loco2);
    trains_to_locomotive.link(train3, loco3);
    trains_to_locomotive.link(train4, loco4);
    trains_to_locomotive.link(train5, loco5);
    trains_to_locomotive.link(train6, loco6);
    trains_to_locomotive.link(train7, loco7);
    trains_to_locomotive.link(train8, loco8);
    trains_to_locomotive.link(train9, loco9);
    trains_to_locomotive.link(train10, loco10);
    trains_to_locomotive.link(train11, loco11);
    trains_to_locomotive.link(train12, loco12);
    trains_to_locomotive.link(train13, loco13);

    OneToMany<Trip, Ticket> trip_to_tickets;
    trip_to_tickets.link(trip_if_kharkiv_m, ticket_if_kharkiv_m1);
    trip_to_tickets.link(trip_if_kharkiv_m, ticket_if_kharkiv_m2);
    trip_to_tickets.link(trip_if_kharkiv_e, ticket_if_kharkiv_e1);
    trip_to_tickets.link(trip_if_kharkiv_e, ticket_if_kharkiv_e2);
    trip_to_tickets.link(trip_if_krakow_m, ticket_if_krakow_m1);
    trip_to_tickets.link(trip_if_krakow_m, ticket_if_krakow_m2);
    trip_to_tickets.link(trip_if_krakow_e, ticket_if_krakow_e1);
    trip_to_tickets.link(trip_if_krakow_e, ticket_if_krakow_e2);
    trip_to_tickets.link(trip_kyiv_warsaw_m, ticket_kyiv_warsaw_m1);
    trip_to_tickets.link(trip_kyiv_warsaw_m, ticket_kyiv_warsaw_m2);
    trip_to_tickets.link(trip_kyiv_warsaw_e, ticket_kyiv_warsaw_e1);
    trip_to_tickets.link(trip_kyiv_warsaw_e, ticket_kyiv_warsaw_e2);
    trip_to_tickets.link(trip_kharkiv_ternopil_m, ticket_kharkiv_ternopil_m1);
    trip_to_tickets.link(trip_kharkiv_ternopil_m, ticket_kharkiv_ternopil_m2);
    trip_to_tickets.link(trip_kharkiv_ternopil_e, ticket_kharkiv_ternopil_e1);
    trip_to_tickets.link(trip_kharkiv_ternopil_e, ticket_kharkiv_ternopil_e2);
    trip_to_tickets.link(trip_odesa_bila_m, ticket_odesa_bila_m1);
    trip_to_tickets.link(trip_odesa_bila_m, ticket_odesa_bila_m2);
    trip_to_tickets.link(trip_odesa_bila_e, ticket_odesa_bila_e1);
    trip_to_tickets.link(trip_odesa_bila_e, ticket_odesa_bila_e2);
    trip_to_tickets.link(trip_uman_lviv_m, ticket_uman_lviv_m1);
    trip_to_tickets.link(trip_uman_lviv_m, ticket_uman_lviv_m2);
    trip_to_tickets.link(trip_uman_lviv_e, ticket_uman_lviv_e1);
    trip_to_tickets.link(trip_uman_lviv_e, ticket_uman_lviv_e2);
    trip_to_tickets.link(trip_krakow_if_m, ticket_krakow_if_m1);
    trip_to_tickets.link(trip_krakow_if_m, ticket_krakow_if_m2);
    trip_to_tickets.link(trip_krakow_if_e, ticket_krakow_if_e1);
    trip_to_tickets.link(trip_krakow_if_e, ticket_krakow_if_e2);
    trip_to_tickets.link(trip_odesa_zhyt_m, ticket_odesa_zhy_m1);
    trip_to_tickets.link(trip_odesa_zhyt_m, ticket_odesa_zhy_m2);
    trip_to_tickets.link(trip_odesa_zhyt_e, ticket_odesa_zhy_e1);
    trip_to_tickets.link(trip_odesa_zhyt_e, ticket_odesa_zhy_e2);

    OneToOne<Ticket, Passenger> ticket_to_passenger;
    ticket_to_passenger.link(ticket_if_kharkiv_m1, passenger1);
    ticket_to_passenger.link(ticket_if_kharkiv_m2, passenger2);
    ticket_to_passenger.link(ticket_if_kharkiv_e1, passenger3);
    ticket_to_passenger.link(ticket_if_kharkiv_e2, passenger4);

    ticket_to_passenger.link(ticket_if_krakow_m1, passenger5);
    ticket_to_passenger.link(ticket_if_krakow_m2, passenger6);
    ticket_to_passenger.link(ticket_if_krakow_e1, passenger7);
    ticket_to_passenger.link(ticket_if_krakow_e2, passenger8);

    ticket_to_passenger.link(ticket_kyiv_warsaw_m1, passenger9);
    ticket_to_passenger.link(ticket_kyiv_warsaw_m2, passenger10);
    ticket_to_passenger.link(ticket_kyiv_warsaw_e1, passenger11);
    ticket_to_passenger.link(ticket_kyiv_warsaw_e2, passenger12);

    ticket_to_passenger.link(ticket_kharkiv_ternopil_m1, passenger13);
    ticket_to_passenger.link(ticket_kharkiv_ternopil_m2, passenger14);
    ticket_to_passenger.link(ticket_kharkiv_ternopil_e1, passenger15);
    ticket_to_passenger.link(ticket_kharkiv_ternopil_e2, passenger16);

    ticket_to_passenger.link(ticket_odesa_bila_m1, passenger17);
    ticket_to_passenger.link(ticket_odesa_bila_m2, passenger18);
    ticket_to_passenger.link(ticket_odesa_bila_e1, passenger19);
    ticket_to_passenger.link(ticket_odesa_bila_e2, passenger20);

    ticket_to_passenger.link(ticket_uman_lviv_m1, passenger21);
    ticket_to_passenger.link(ticket_uman_lviv_m2, passenger22);
    ticket_to_passenger.link(ticket_uman_lviv_e1, passenger23);
    ticket_to_passenger.link(ticket_uman_lviv_e2, passenger24);

    ticket_to_passenger.link(ticket_krakow_if_m1, passenger25);
    ticket_to_passenger.link(ticket_krakow_if_m2, passenger26);
    ticket_to_passenger.link(ticket_krakow_if_e1, passenger27);
    ticket_to_passenger.link(ticket_krakow_if_e2, passenger28);

    ticket_to_passenger.link(ticket_odesa_zhy_m1, passenger29);
    ticket_to_passenger.link(ticket_odesa_zhy_m2, passenger30);
    ticket_to_passenger.link(ticket_odesa_zhy_e1, passenger31);
    ticket_to_passenger.link(ticket_odesa_zhy_e2, passenger32);

    saveEntitiesByType({department1, department2,

                        head1, head2,

                        dispatcher1, dispatcher2, dispatcher3,

                        cashier1, cashier2, cashier3, cashier4, cashier5,

                        driver1, driver2, driver3, driver4, driver5, driver6, driver7,
                        driver8, driver9, driver10, driver11, driver12, driver13,

                        tech1, tech2, tech3, tech4, tech5, tech6, tech7, tech8,

                        staff1, staff2, staff3, staff4, staff5, staff6, staff7, staff8,
                        staff9, staff10, staff11, staff12, staff13, staff14, staff15,
                        staff16, staff17, staff18, staff19, staff20, staff21, staff22,
                        staff23, staff24, staff25, staff26,

                        tech_brigade1, tech_brigade2,

                        loco_brigade1, loco_brigade2, loco_brigade3, loco_brigade4,
                        loco_brigade5, loco_brigade6, loco_brigade7, loco_brigade8,
                        loco_brigade9, loco_brigade10, loco_brigade11, loco_brigade12,
                        loco_brigade13,

                        loco1, loco2, loco3, loco4, loco5, loco6, loco7,
                        loco8, loco9, loco10, loco11, loco12, loco13,

                        warsaw, krakow, lviv, ivano_frankivsk, ternopil, khmelnytskyi,
                        zhytomyr, kyiv, bila_tserkva, uman, poltava, odesa, kharkiv,

                        route_if_kharkiv, trip_if_kharkiv_m, trip_if_kharkiv_e,
                        route_if_krakow, trip_if_krakow_m, trip_if_krakow_e,
                        route_kyiv_warsaw, trip_kyiv_warsaw_m, trip_kyiv_warsaw_e,
                        route_kharkiv_ternopil, trip_kharkiv_ternopil_m, trip_kharkiv_ternopil_e,
                        route_odesa_bila, trip_odesa_bila_m, trip_odesa_bila_e,
                        route_uman_lviv, trip_uman_lviv_m, trip_uman_lviv_e,
                        route_krakow_if, trip_krakow_if_m, trip_krakow_if_e,
                        route_odesa_zhyt, trip_odesa_zhyt_m, trip_odesa_zhyt_e,

                        train1, train2, train3, train4, train5, train6, train7, train8, train9,
                        train10, train11, train12, train13,

                        passenger1, passenger2, passenger3, passenger4, passenger5, passenger6,
                        passenger7, passenger8, passenger9, passenger10, passenger11, passenger12,
                        passenger13, passenger14, passenger15, passenger16, passenger17, passenger18,
                        passenger19, passenger20, passenger21, passenger22, passenger23, passenger24,
                        passenger25, passenger26, passenger27, passenger28, passenger29, passenger30,
                        passenger31, passenger32,

                        ticket_if_kharkiv_m1, ticket_if_kharkiv_m2, ticket_if_kharkiv_e1, ticket_if_kharkiv_e2,
                        ticket_if_krakow_m1, ticket_if_krakow_m2, ticket_if_krakow_e1, ticket_if_krakow_e2,
                        ticket_kyiv_warsaw_m1, ticket_kyiv_warsaw_m2, ticket_kyiv_warsaw_e1, ticket_kyiv_warsaw_e2,
                        ticket_kharkiv_ternopil_m1, ticket_kharkiv_ternopil_m2, ticket_kharkiv_ternopil_e1, ticket_kharkiv_ternopil_e2,
                        ticket_odesa_bila_m1, ticket_odesa_bila_m2, ticket_odesa_bila_e1, ticket_odesa_bila_e2,
                        ticket_uman_lviv_m1, ticket_uman_lviv_m2, ticket_uman_lviv_e1, ticket_uman_lviv_e2,
                        ticket_krakow_if_m1, ticket_krakow_if_m2, ticket_krakow_if_e1, ticket_krakow_if_e2,
                        ticket_odesa_zhy_m1, ticket_odesa_zhy_m2, ticket_odesa_zhy_e1, ticket_odesa_zhy_e2});

    saveLinks(department_to_head_department);
    saveLinks(department_to_employee);
    saveLinks(station_to_locomotives);
    saveLinks(locomotive_to_drivers);
    saveLinks(tech_brigade_to_locomotives);
    saveLinks(tech_brigade_to_technician);
    saveLinks(locomotive_brigade_to_locomotive);
    saveLinks(locomotive_brigade_to_staffs);
    saveLinks(routes_to_stations);
    saveLinks(route_to_trips);
    saveLinks(locomotives_to_trips);
    saveLinks(trains_to_locomotive);
    saveLinks(trip_to_tickets);
    saveLinks(ticket_to_passenger);

    return 0;
}